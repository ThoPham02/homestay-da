# Test API Authentication - Curl Commands for Postman
# Format Response: { "result": { "code": 0, "message": "Thành công" }, "data": {} }
# Access Token: 30 ngày (không có refresh token)

# ========================================
# 1. REGISTER USER
# ========================================

# Register as Guest
curl -X POST http://localhost:8080/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Nguyễn Văn A",
    "email": "guest@example.com",
    "password": "password123",
    "role": "guest"
  }'

# Expected Response:
# {
#   "result": {
#     "code": 0,
#     "message": "Thành công"
#   },
#   "data": {
#     "user": {
#       "id": 1,
#       "name": "Nguyễn Văn A",
#       "email": "guest@example.com",
#       "role": "guest"
#     },
#     "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
#     "expires_in": 2592000
#   }
# }

# Register as Host
curl -X POST http://localhost:8080/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Trần Thị B",
    "email": "host@example.com",
    "password": "password123",
    "role": "host"
  }'

# Register as Admin
curl -X POST http://localhost:8080/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Admin User",
    "email": "admin@example.com",
    "password": "password123",
    "role": "admin"
  }'

# ========================================
# 2. LOGIN
# ========================================

# Login as Guest
curl -X POST http://localhost:8080/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "guest@example.com",
    "password": "password123"
  }'

# Expected Response:
# {
#   "result": {
#     "code": 0,
#     "message": "Thành công"
#   },
#   "data": {
#     "user": {
#       "id": 1,
#       "name": "Nguyễn Văn A",
#       "email": "guest@example.com",
#       "role": "guest"
#     },
#     "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
#     "expires_in": 2592000
#   }
# }

# Login as Host
curl -X POST http://localhost:8080/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "host@example.com",
    "password": "password123"
  }'

# Login as Admin
curl -X POST http://localhost:8080/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "admin@example.com",
    "password": "password123"
  }'

# ========================================
# 3. GET PROFILE (Protected Route)
# ========================================

# Get profile with Bearer token (replace YOUR_TOKEN_HERE with actual token)
curl -X GET http://localhost:8080/api/auth/profile \
  -H "Authorization: Bearer YOUR_TOKEN_HERE"

# Expected Response:
# {
#   "result": {
#     "code": 0,
#     "message": "Thành công"
#   },
#   "data": {
#     "user": {
#       "id": 1,
#       "name": "Nguyễn Văn A",
#       "email": "guest@example.com",
#       "role": "guest"
#     }
#   }
# }

# ========================================
# 4. LOGOUT
# ========================================

# Logout (replace YOUR_TOKEN_HERE with actual token)
curl -X POST http://localhost:8080/api/auth/logout \
  -H "Authorization: Bearer YOUR_TOKEN_HERE"

# Expected Response:
# {
#   "result": {
#     "code": 0,
#     "message": "Thành công"
#   },
#   "data": {
#     "message": "Đăng xuất thành công"
#   }
# }

# ========================================
# 5. TEST PROTECTED ROUTES
# ========================================

# Test Guest Route (replace YOUR_TOKEN_HERE with guest token)
curl -X GET http://localhost:8080/api/guest/dashboard \
  -H "Authorization: Bearer YOUR_TOKEN_HERE"

# Expected Response:
# {
#   "result": {
#     "code": 0,
#     "message": "Thành công"
#   },
#   "data": {
#     "message": "Guest Dashboard"
#   }
# }

# Test Host Route (replace YOUR_TOKEN_HERE with host token)
curl -X GET http://localhost:8080/api/host/dashboard \
  -H "Authorization: Bearer YOUR_TOKEN_HERE"

# Expected Response:
# {
#   "result": {
#     "code": 0,
#     "message": "Thành công"
#   },
#   "data": {
#     "message": "Host Dashboard"
#   }
# }

# Test Admin Route (replace YOUR_TOKEN_HERE with admin token)
curl -X GET http://localhost:8080/api/admin/dashboard \
  -H "Authorization: Bearer YOUR_TOKEN_HERE"

# Expected Response:
# {
#   "result": {
#     "code": 0,
#     "message": "Thành công"
#   },
#   "data": {
#     "message": "Admin Dashboard"
#   }
# }

# ========================================
# 6. ERROR CASES
# ========================================

# Test invalid email format
curl -X POST http://localhost:8080/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Test User",
    "email": "invalid-email",
    "password": "password123",
    "role": "guest"
  }'

# Expected Response:
# {
#   "result": {
#     "code": 400,
#     "message": "Dữ liệu không hợp lệ: Key: 'RegisterRequest.Email' Error:Field validation for 'Email' failed on the 'email' tag"
#   },
#   "data": null
# }

# Test weak password
curl -X POST http://localhost:8080/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Test User",
    "email": "test@example.com",
    "password": "123",
    "role": "guest"
  }'

# Expected Response:
# {
#   "result": {
#     "code": 400,
#     "message": "Dữ liệu không hợp lệ: Key: 'RegisterRequest.Password' Error:Field validation for 'Password' failed on the 'min' tag"
#   },
#   "data": null
# }

# Test invalid role
curl -X POST http://localhost:8080/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Test User",
    "email": "test@example.com",
    "password": "password123",
    "role": "invalid_role"
  }'

# Expected Response:
# {
#   "result": {
#     "code": 400,
#     "message": "Role không hợp lệ. Chỉ chấp nhận: admin, host, guest"
#   },
#   "data": null
# }

# Test login with wrong password
curl -X POST http://localhost:8080/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "guest@example.com",
    "password": "wrongpassword"
  }'

# Expected Response:
# {
#   "result": {
#     "code": 401,
#     "message": "email hoặc mật khẩu không đúng"
#   },
#   "data": null
# }

# Test login with non-existent email
curl -X POST http://localhost:8080/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "nonexistent@example.com",
    "password": "password123"
  }'

# Expected Response:
# {
#   "result": {
#     "code": 401,
#     "message": "email hoặc mật khẩu không đúng"
#   },
#   "data": null
# }

# Test protected route without token
curl -X GET http://localhost:8080/api/auth/profile

# Expected Response:
# {
#   "result": {
#     "code": 401,
#     "message": "Token không được cung cấp"
#   },
#   "data": null
# }

# Test protected route with invalid token
curl -X GET http://localhost:8080/api/auth/profile \
  -H "Authorization: Bearer invalid_token_here"

# Expected Response:
# {
#   "result": {
#     "code": 401,
#     "message": "Token không hợp lệ"
#   },
#   "data": null
# }

# Test role-based access (guest trying to access admin route)
curl -X GET http://localhost:8080/api/admin/dashboard \
  -H "Authorization: Bearer GUEST_TOKEN_HERE"

# Expected Response:
# {
#   "result": {
#     "code": 403,
#     "message": "Không có quyền truy cập"
#   },
#   "data": null
# }

# ========================================
# 7. BATCH TESTING
# ========================================

# Test complete flow: Register -> Login -> Get Profile -> Logout
echo "=== Testing Complete Auth Flow ==="

# Step 1: Register
echo "1. Registering user..."
REGISTER_RESPONSE=$(curl -s -X POST http://localhost:8080/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Test User",
    "email": "testuser@example.com",
    "password": "password123",
    "role": "guest"
  }')
echo "Register Response: $REGISTER_RESPONSE"

# Step 2: Login
echo "2. Logging in..."
LOGIN_RESPONSE=$(curl -s -X POST http://localhost:8080/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "testuser@example.com",
    "password": "password123"
  }')
echo "Login Response: $LOGIN_RESPONSE"

# Extract token from login response (you'll need to parse this manually)
echo "3. Extract token from login response and use it in subsequent requests"

# Step 3: Get Profile (replace TOKEN_HERE with actual token)
echo "4. Getting profile..."
curl -X GET http://localhost:8080/api/auth/profile \
  -H "Authorization: Bearer TOKEN_HERE"

# Step 4: Logout
echo "5. Logging out..."
curl -X POST http://localhost:8080/api/auth/logout \
  -H "Authorization: Bearer TOKEN_HERE"

echo "=== Auth Flow Test Complete ==="

# ========================================
# 8. RESPONSE FORMAT EXAMPLES
# ========================================

# Success Response Format:
# {
#   "result": {
#     "code": 0,
#     "message": "Thành công"
#   },
#   "data": {
#     // Actual data here
#   }
# }

# Error Response Format:
# {
#   "result": {
#     "code": 400,
#     "message": "Error message here"
#   },
#   "data": null
# }

# Common Error Codes:
# 0   - Success
# 400 - Bad Request
# 401 - Unauthorized
# 403 - Forbidden
# 404 - Not Found
# 500 - Internal Server Error

# ========================================
# 9. TOKEN INFORMATION
# ========================================

# Access Token:
# - Duration: 30 days (2,592,000 seconds)
# - No refresh token mechanism
# - Users need to re-login when token expires
# - Token contains: user_id, email, role, exp, iat

# Token Usage:
# - Include in Authorization header: "Bearer <token>"
# - Valid for all protected routes
# - Role-based access control enforced
# - Automatic expiration after 30 days 